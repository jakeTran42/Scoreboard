type Query {
  info(context: String!): String!
  gameReviews(filter: String, skip: Int, first: Int, orderBy: ReviewOrderByInput): ReviewFeed!
  igdbSearch(path: String, search: String, fields: String, filter: String, limit: Int, sort: String): [Game!]!
}

type Mutation {
    postReview(igdbId: Int!, igdbTitle: String!, title: String!, content: String!, score: Int!): Review!
    signup(username: String!, email: String!, password: String!, name: String!): AuthPayload
    login(username: String, email: String, password: String!): AuthPayload
    vote(reviewId: ID!): Vote
}

type ReviewFeed {
  reviews: [Review!]!
  count: Int!
}

type Review {
    id: ID!
    igdbId: Int!
    igdbTitle: String!
    title: String!
    content: String!
    score: Int!
    postedBy: User
    votes: [Vote!]!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  username: String!
  name: String!
  email: String!
  reviews: [Review!]!
}

type Vote {
  id: ID!
  review: Review!
  user: User!
}

enum ReviewOrderByInput {
  title_ASC
  title_DESC
  score_ASC
  score_DESC
  createdAt_ASC
  createdAt_DESC
}

# IGDB API call transform into SDL

type Game {
  id: Int!
  name: String!
  slug: String!
  category: String
  cover: String
  collection: String
  first_release_date: Int
  genres: [String]!
  involved_companies: [String]!
  platforms: [String]!
  popularity: Float
  rating: Float
  summary: String
  themes: [String]!
  total_rating: Float
  total_rating_count: Int
  status: String
}